{"version":3,"sources":["ra-django/DataProvider.js","ra-django/UrlSetting.js","post/PostList.js","post/PostEdit.js","post/PostCreate.js","Profile/ProfileList.js","Profile/ProfileEdit.js","skill/SkillList.js","skill/SkillEdit.js","skill/SkillCreate.js","experience/experienceCreate.js","experience/experienceEdit.js","experience/experienceList.js","portfolio/portfolioList.js","portfolio/portfolioEdit.js","portfolio/portfolioCreate.js","socialnetwork/SocialList.js","socialnetwork/SocialEdit.js","socialnetwork/SocialCreate.js","contact/ContactList.js","password.js","MyUserMenu.js","MyAppBar.js","MyLayout.js","index.js","ra-django/tokenAuthProvider.js"],"names":["getPaginationQuery","pagination","page","page_size","perPage","getFilterQuery","filter","search","q","otherSearchParams","getOrderingQuery","sort","field","order","ordering","fileFiled","drfProvider","apiUrl","httpClient","fetchUtils","fetchJson","getOneJson","resource","id","then","response","json","getList","params","a","query","console","log","url","stringify","data","results","total","count","getOne","getMany","Promise","all","ids","map","getManyReference","target","update","formData","FormData","Object","keys","forEach","key","includes","append","rawFile","myHeaders","Headers","method","headers","body","create","delete","previousData","deleteMany","responses","tokenUrl","mainUrl","PostList","props","List","Datagrid","TextField","source","EditButton","basePath","useStyles","makeStyles","root","maxWidth","media","height","PostTitle","record","title","Lastpicture","form","useFormState","classes","Box","Typography","style","fontSize","marginBottom","className","Card","CardActionArea","CardMedia","image","values","picture","PostEdit","Edit","SimpleForm","TextInput","disabled","validate","maxLength","required","toolbar","AutocompleteInput","choices","name","label","ImageInput","accept","ImageField","PostCreate","Create","ProfileList","bulkActionButtons","ProfileTitle","first_name","last_name","ShowPicture","ProfileEdit","controllerProps","useEditController","socialNetwork","useQuery","type","payload","loading","value","TabbedForm","initialValues","average_note","FormTab","Grid","container","spacing","width","item","xs","fullWidth","DateInput","multiline","AutocompleteArrayInput","picture_small","FileInput","FileField","display","justifyContent","alignItems","mt","href","cv","SkillList","SkillTitle","SkillEdit","NumberInput","maxValue","minValue","SkillCreate","ExperienceCreate","SelectInput","ExperienceTitle","ExperienceEdit","ExperienceList","PortfolioList","PortfolioTitle","PortfolioEdit","PortfolioCreate","SocialList","SocialTitle","SocialEdit","SocialCreate","ContactList","ShowButton","theme","margin","Foo","useAuthenticated","useState","repeatValid","seRepeatVail","passValid","setPassVaild","repeatValidText","seRepeatValidText","passValidText","sePassValidText","password","setPassword","passwordRepeat","setPasswordRepeat","notify","useNotify","token","localStorage","getItem","axios","put","status","Title","CardContent","autoComplete","minHeight","onChange","e","helperText","error","Button","onClick","zxcvbn","score","alert","sendPassword","variant","color","MyUserMenu","UserMenu","MenuItemLink","to","primaryText","leftIcon","MyAppBar","AppBar","userMenu","MyLayout","Layout","appBar","authProvider","options","opts","obtainAuthTokenUrl","login","username","request","Request","JSON","fetch","ok","setItem","get","Error","statusText","non_field_errors","logout","removeItem","resolve","checkAuth","reject","checkError","getPermissions","tokenAuthProvider","dataProvider","assign","user","authenticated","createOptionsFromToken","render","Admin","customRoutes","exact","path","component","appLayout","permissions","Resource","list","edit","icon","SubjectIcon","BuildIcon","TransferWithinAStationIcon","WorkIcon","WebIcon","show","ShowGuesser","MessageIcon","AccountBoxIcon","document","getElementById"],"mappings":"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","file":"static/js/main.a27ad7a8.chunk.js","sourcesContent":["import {stringify} from 'query-string';\r\nimport {fetchUtils,} from 'ra-core';\r\n\r\nconst getPaginationQuery = (pagination) => {\r\n    return {\r\n        page: pagination.page,\r\n        page_size: pagination.perPage,\r\n    };\r\n};\r\nconst getFilterQuery = (filter) => {\r\n    const {q: search, ...otherSearchParams} = filter;\r\n    return {\r\n        ...otherSearchParams,\r\n        search,\r\n    };\r\n};\r\nexport const getOrderingQuery = (sort) => {\r\n    const {field, order} = sort;\r\n    return {\r\n        ordering: `${order === 'ASC' ? '' : '-'}${field}`,\r\n    };\r\n};\r\nconst fileFiled = [\"picture\", \"picture_small\", \"cv\"]\r\n\r\nexport const drfProvider = (apiUrl, httpClient = fetchUtils.fetchJson) => {\r\n    const getOneJson = (resource, id) => httpClient(`${apiUrl}/${resource}/${id}/`).then((response) => response.json);\r\n    return {\r\n        getList: async (resource, params) => {\r\n            const query = {\r\n                ...getFilterQuery(params.filter),\r\n                ...getPaginationQuery(params.pagination),\r\n                ...getOrderingQuery(params.sort),\r\n            };\r\n            console.log(query);\r\n            const url = `${apiUrl}/${resource}/?${stringify(query)}`;\r\n            const {json} = await httpClient(url);\r\n            return {\r\n                data: json.results,\r\n                total: json.count,\r\n            };\r\n        },\r\n        getOne: async (resource, params) => {\r\n            const data = await getOneJson(resource, params.id);\r\n            return {\r\n                data,\r\n            };\r\n        },\r\n        getMany: (resource, params) => {\r\n            return Promise.all(params.ids.map(id => getOneJson(resource, id))).then(data => ({data}));\r\n        },\r\n        getManyReference: async (resource, params) => {\r\n            const query = {\r\n                ...getFilterQuery(params.filter),\r\n                ...getPaginationQuery(params.pagination),\r\n                ...getOrderingQuery(params.sort),\r\n                [params.target]: params.id,\r\n            };\r\n            const url = `${apiUrl}/${resource}/?${stringify(query)}`;\r\n            const {json} = await httpClient(url);\r\n            return {\r\n                data: json.results,\r\n                total: json.count,\r\n            };\r\n        },\r\n        update: async (resource, params) => {\r\n            const formData = new FormData();\r\n            Object.keys(params.data).forEach(\r\n                (key) => {\r\n                    if (fileFiled.includes(key)) {\r\n                        if (Object.keys(params.data[key]).includes(\"rawFile\")) {\r\n                            formData.append(key, params.data[key].rawFile)\r\n                            console.log(\"hear\")\r\n                        }\r\n                    } else {\r\n                        formData.append(key, params.data[key])\r\n                    }\r\n\r\n                }\r\n            )\r\n            const myHeaders = new Headers();\r\n            myHeaders.append('enctype', 'multipart/form-data');\r\n            const {json} = await httpClient(`${apiUrl}/${resource}/${params.id}/`, {\r\n                method: 'PUT',\r\n                headers: myHeaders,\r\n                body: formData,\r\n                // referrerPolicy:\"origin-when-cross-origin\",\r\n            });\r\n            return {data: json};\r\n        },\r\n        // updateMany: (resource, params) => Promise.all(params.ids.map(id => httpClient(`${apiUrl}/${resource}/${id}/`, {\r\n        //     method: 'PATCH',\r\n        //     body: JSON.stringify(params.data),\r\n        // }))).then(responses => ({data: responses.map(({json}) => json.id)})),\r\n        create: async (resource, params) => {\r\n            const formData = new FormData()\r\n            const myHeaders = new Headers();\r\n            Object.keys(params.data).forEach(\r\n                (key) => {\r\n                    if (Object.keys(params.data[key]).includes(\"rawFile\")) {\r\n                        formData.append(key, params.data[key].rawFile)\r\n                    } else {\r\n                        formData.append(key, params.data[key])\r\n                    }\r\n\r\n                }\r\n            )\r\n            myHeaders.append('enctype', 'multipart/form-data');\r\n            const {json} = await httpClient(`${apiUrl}/${resource}/`, {\r\n                method: 'POST',\r\n                headers: myHeaders,\r\n                body: formData,\r\n            });\r\n            return {\r\n                data: {...json},\r\n            };\r\n        },\r\n        delete: (resource, params) => httpClient(`${apiUrl}/${resource}/${params.id}/`, {\r\n            method: 'DELETE',\r\n        }).then(() => ({data: params.previousData})),\r\n        deleteMany: (resource, params) => Promise.all(params.ids.map(id => httpClient(`${apiUrl}/${resource}/${id}/`, {\r\n            method: 'DELETE',\r\n        }))).then(responses => ({data: responses.map(({json}) => json.id)})),\r\n    };\r\n};\r\nexport default drfProvider;\r\n","export const tokenUrl = '/api-token-auth/';\r\nexport const mainUrl = \"/admin/apiv1\";\r\n// export const tokenUrl = 'http://localhost:8000/api-token-auth/';\r\n// export const mainUrl = \"http://localhost:8000/admin/apiv1\";\r\nexport default mainUrl;","import {Datagrid, EditButton, List, TextField} from \"react-admin\";\r\nimport * as React from \"react\";\r\n\r\nconst PostList = (props) => (\r\n    <List {...props}>\r\n        <Datagrid>\r\n            <TextField source=\"title\"/>\r\n            <EditButton basePath=\"/post\"/>\r\n        </Datagrid>\r\n    </List>\r\n);\r\nexport default PostList;","import {useFormState} from \"react-final-form\";\r\nimport {Box, Card, CardActionArea, CardMedia, Typography} from \"@material-ui/core\";\r\nimport {\r\n    AutocompleteInput,\r\n    Edit,\r\n    ImageField,\r\n    ImageInput,\r\n    maxLength,\r\n    required,\r\n    SimpleForm,\r\n    TextInput,\r\n} from \"react-admin\";\r\nimport RichTextInput from \"ra-input-rich-text\";\r\nimport * as React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        maxWidth: 345,\r\n    },\r\n    media: {\r\n        height: 140,\r\n    },\r\n});\r\nconst PostTitle = ({record}) => {\r\n    return <span>Post {record ? `\"${record.title}\"` : ''}</span>;\r\n};\r\n\r\nconst Lastpicture = () => {\r\n    const form = useFormState();\r\n    const classes = useStyles();\r\n    return (\r\n        <Box>\r\n            <Typography style={{fontSize: \"0.8rem\", marginBottom: \"10px\"}}\r\n                        className=\"MuiFormLabel-root RaFileInput-root-78\">\r\n                Last Picture\r\n            </Typography>\r\n            <Card className={classes.root}>\r\n                <CardActionArea>\r\n                    <CardMedia\r\n                        className={classes.media}\r\n                        image={form.values.picture}\r\n                        title=\"Contemplative Reptile\"\r\n                    />\r\n                </CardActionArea>\r\n            </Card>\r\n        </Box>\r\n    );\r\n}\r\nconst PostEdit = (props) => {\r\n        return (\r\n            <Edit title={<PostTitle/>} {...props}>\r\n                <SimpleForm>\r\n                    <TextInput disabled source=\"id\"/>\r\n                    <TextInput validate={[maxLength(200), required()]} source=\"title\"/>\r\n                    <TextInput validate={[maxLength(50), required()]} source=\"tag\"/>\r\n                    <RichTextInput\r\n                        source=\"content\"\r\n                        validate={[maxLength(4000), required()]}\r\n                        toolbar={[\r\n                            ['bold', 'italic', 'underline', 'strike'],        // toggled buttons\r\n                            ['blockquote', 'code-block'],\r\n\r\n                            [{'header': 1}, {'header': 2}],               // custom button values\r\n                            [{'list': 'ordered'}, {'list': 'bullet'}],\r\n                            [{'script': 'sub'}, {'script': 'super'}],      // superscript/subscript\r\n                            [{'indent': '-1'}, {'indent': '+1'}],          // outdent/indent\r\n                            [{'direction': 'rtl'}],                         // text direction\r\n\r\n                            [{'size': ['small', false, 'large', 'huge']}],  // custom dropdown\r\n                            [{'header': [1, 2, 3, 4, 5, 6, false]}],\r\n\r\n                            [{'color': []}, {'background': []}],          // dropdown with defaults from theme\r\n                            [{'font': []}],\r\n                            [{'align': []}],\r\n\r\n                            ['clean']                                         // remove formatting button\r\n                        ]}\r\n                    />\r\n                    <AutocompleteInput validate={[maxLength(50), required()]} source=\"status\" choices={[\r\n                        {id: 'Published', name: 'Published'},\r\n                        {id: 'Draft', name: 'Draft'},\r\n                        {id: 'Trash', name: 'Trash'},\r\n                    ]}/>\r\n                    <TextInput disabled label=\"Nb views\" source=\"view\"/>\r\n                    <Lastpicture/>\r\n                    <ImageInput validate={[required()]} source=\"picture\" accept=\"image/*\">\r\n                        <ImageField source=\"src\" title=\"title\"/>\r\n                    </ImageInput>\r\n                </SimpleForm>\r\n            </Edit>\r\n        )\r\n    }\r\n;\r\n\r\n\r\nexport default PostEdit;","import {\r\n    AutocompleteInput,\r\n    Create,\r\n    ImageField,\r\n    ImageInput,\r\n    maxLength,\r\n    required,\r\n    SimpleForm,\r\n    TextInput\r\n} from \"react-admin\";\r\nimport RichTextInput from \"ra-input-rich-text\";\r\nimport * as React from \"react\";\r\n\r\nconst PostCreate = (props) => (\r\n    <Create title=\"Create a Post\" {...props}>\r\n        <SimpleForm>\r\n            <TextInput validate={[maxLength(200), required()]} source=\"title\"/>\r\n            <TextInput validate={[maxLength(50), required()]} source=\"tag\"/>\r\n            <RichTextInput\r\n                source=\"content\"\r\n                validate={[maxLength(4000), required()]}\r\n                toolbar={[\r\n                    ['bold', 'italic', 'underline', 'strike'],        // toggled buttons\r\n                    ['blockquote', 'code-block'],\r\n\r\n                    [{'header': 1}, {'header': 2}],               // custom button values\r\n                    [{'list': 'ordered'}, {'list': 'bullet'}],\r\n                    [{'script': 'sub'}, {'script': 'super'}],      // superscript/subscript\r\n                    [{'indent': '-1'}, {'indent': '+1'}],          // outdent/indent\r\n                    [{'direction': 'rtl'}],                         // text direction\r\n\r\n                    [{'size': ['small', false, 'large', 'huge']}],  // custom dropdown\r\n                    [{'header': [1, 2, 3, 4, 5, 6, false]}],\r\n\r\n                    [{'color': []}, {'background': []}],          // dropdown with defaults from theme\r\n                    [{'font': []}],\r\n                    [{'align': []}],\r\n\r\n                    ['clean']                                         // remove formatting button\r\n                ]}\r\n            />\r\n            <AutocompleteInput validate={[required()]} source=\"status\" choices={[\r\n                {id: 'Published', name: 'Published'},\r\n                {id: 'Draft', name: 'Draft'},\r\n                {id: 'Trash', name: 'Trash'},\r\n            ]}/>\r\n            <TextInput disabled label=\"Nb views\" source=\"view\"/>\r\n            <ImageInput validate={[required()]} source=\"picture\" accept=\"image/*\">\r\n                <ImageField source=\"src\" title=\"title\"/>\r\n            </ImageInput>\r\n        </SimpleForm>\r\n    </Create>\r\n);\r\n\r\nexport default PostCreate;","import {Datagrid, EditButton, List, TextField} from \"react-admin\";\r\nimport * as React from \"react\";\r\n\r\nconst ProfileList = (props) => (\r\n    <List {...props} bulkActionButtons={false}>\r\n        <Datagrid>\r\n            <TextField source=\"email\"/>\r\n            <EditButton basePath=\"/profile\"/>\r\n        </Datagrid>\r\n    </List>\r\n);\r\nexport default ProfileList;","import {Grid, Box, Card, CardActionArea, CardMedia, Typography} from \"@material-ui/core\";\r\nimport {\r\n    DateInput,\r\n    Edit,\r\n    ImageField,\r\n    ImageInput,\r\n    TextInput,\r\n    TabbedForm,\r\n    FormTab,\r\n    useEditController,\r\n    FileInput,\r\n    FileField,\r\n    useQuery,\r\n    AutocompleteArrayInput, maxLength, required,\r\n} from \"react-admin\";\r\nimport RichTextInput from \"ra-input-rich-text\";\r\nimport * as React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport PictureAsPdfIcon from '@material-ui/icons/PictureAsPdf';\r\n\r\nconst ProfileTitle = ({record}) => {\r\n    return <span>Profile {record ? `\"${record.first_name}${record.last_name}\"` : ''}</span>;\r\n};\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        maxWidth: 345,\r\n    },\r\n    media: {\r\n        height: 300,\r\n    },\r\n});\r\n\r\n\r\nconst ShowPicture = ({picture}) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Box>\r\n            <Typography style={{fontSize: \"0.8rem\", marginBottom: \"10px\"}}\r\n                        className=\"MuiFormLabel-root RaFileInput-root-78\">\r\n                Last Picture\r\n            </Typography>\r\n            <Card className={classes.root}>\r\n                <CardActionArea>\r\n                    <CardMedia\r\n                        className={classes.media}\r\n                        image={picture}\r\n                        title=\"Contemplative Reptile\"\r\n                    />\r\n                </CardActionArea>\r\n            </Card>\r\n        </Box>\r\n    );\r\n}\r\nconst ProfileEdit = (props) => {\r\n        const controllerProps = useEditController(props);\r\n        const socialNetwork = useQuery({\r\n            type: 'getList',\r\n            resource: 'socialnetwork',\r\n            payload: {ordering: {}, filter: {}, sort: {}, pagination: {}},\r\n            // payload: {pagination: {page: {1}, perPage: {10}}, sort: {field: {string}, order: {string}}, filter: {Object}}\r\n        });\r\n        let {\r\n            record, // record fetched via dataProvider.getOne() based on the id from the location\r\n        } = controllerProps;\r\n        if (typeof record == \"undefined\" || (socialNetwork.loading)) {\r\n            return (\r\n                <React.Fragment/>\r\n            )\r\n        } else {\r\n            const choices = socialNetwork.data.map((value) => {\r\n                return {id: value.id, name: value.title}\r\n            })\r\n            return (\r\n\r\n                <Edit\r\n                    title={<ProfileTitle/>}\r\n                    {...props}>\r\n                    <TabbedForm\r\n                        initialValues={{average_note: 0}}\r\n                        // toolbar={<UserEditToolbar/>}\r\n                    >\r\n                        <FormTab label=\"Page 1\">\r\n                            <Grid container spacing={3} style={{width: \"100%\"}}>\r\n                                <Grid item xs={6}>\r\n                                    <TextInput validate={[maxLength(50), required()]} fullWidth source=\"first_name\"/>\r\n                                    <TextInput validate={[maxLength(50), required()]} fullWidth source=\"last_name\"/>\r\n                                    <DateInput validate={[maxLength(50),]} fullWidth source=\"birth_date\"/>\r\n\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <TextInput validate={[maxLength(200)]} fullWidth multiline source=\"address\"/>\r\n                                    <TextInput validate={[maxLength(50)]} fullWidth source=\"phone_number\"/>\r\n                                    <TextInput validate={[maxLength(50), required()]} fullWidth source=\"email\"/>\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <TextInput validate={[maxLength(200), required()]} fullWidth multiline\r\n                                               source=\"description\"/>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </FormTab>\r\n                        <FormTab label=\"Page 2\">\r\n                            <Grid container spacing={3} style={{width: \"100%\"}}>\r\n                                <Grid item xs={6}>\r\n                                    <TextInput validate={[maxLength(50), required()]} fullWidth source=\"languages\"/>\r\n                                    <AutocompleteArrayInput\r\n                                        fullWidth\r\n                                        source=\"tag\"\r\n                                        choices={choices}\r\n\r\n                                    />\r\n                                    <TextInput validate={[maxLength(50), required()]} fullWidth source=\"title\"/>\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <TextInput validate={[maxLength(50),]} fullWidth source=\"years_of_experience\"/>\r\n                                    <TextInput validate={[maxLength(50), required()]} fullWidth source=\"linkedin_id\"/>\r\n                                    <TextInput validate={[maxLength(50)]} fullWidth source=\"skype_id\"/>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </FormTab>\r\n                        <FormTab label=\"Files\">\r\n                            <Grid container spacing={3} style={{width: \"100%\"}}>\r\n                                <Grid item xs={6}>\r\n                                    <ImageInput validate={[ required()]} source=\"picture\" accept=\"image/*\">\r\n                                        <ImageField source=\"src\" title=\"Big Picture\"/>\r\n                                    </ImageInput>\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <ShowPicture picture={record.picture}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid container spacing={3} style={{width: \"100%\"}}>\r\n                                <Grid item xs={6}>\r\n                                    <ImageInput validate={[ required()]} source=\"picture_small\" accept=\"image/*\">\r\n                                        <ImageField source=\"src\" title=\"Smal Picture\"/>\r\n                                    </ImageInput>\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <ShowPicture picture={record.picture && record.picture_small}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid container spacing={3} style={{width: \"100%\"}}>\r\n                                <Grid item xs={6}>\r\n                                    <FileInput validate={[ required()]} source=\"cv\" label=\"Related files\" accept=\"application/pdf\">\r\n                                        <FileField source=\"src\" title=\"CV\"/>\r\n                                    </FileInput>\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\r\n                                        <Box mt={2}>\r\n                                            <a href={record.cv}>\r\n                                                <PictureAsPdfIcon style={{fontSize: 100}}/>\r\n                                            </a>\r\n                                        </Box>\r\n                                    </Box>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </FormTab>\r\n                        <FormTab label=\"Page 3\">\r\n                            <Box spacing={3} style={{width: \"100%\"}}>\r\n                                <RichTextInput\r\n                                    fullWidth\r\n                                    multiline\r\n                                    validate={[maxLength(500), required()]}\r\n                                    source=\"thanks_message\"\r\n                                    toolbar={[\r\n                                        ['bold', 'italic', 'underline', 'strike'],        // toggled buttons\r\n                                        ['blockquote', 'code-block'],\r\n\r\n                                        [{'header': 1}, {'header': 2}],               // custom button values\r\n                                        [{'list': 'ordered'}, {'list': 'bullet'}],\r\n                                        [{'script': 'sub'}, {'script': 'super'}],      // superscript/subscript\r\n                                        [{'indent': '-1'}, {'indent': '+1'}],          // outdent/indent\r\n                                        [{'direction': 'rtl'}],                         // text direction\r\n\r\n                                        [{'size': ['small', false, 'large', 'huge']}],  // custom dropdown\r\n                                        [{'header': [1, 2, 3, 4, 5, 6, false]}],\r\n\r\n                                        [{'color': []}, {'background': []}],          // dropdown with defaults from theme\r\n                                        [{'font': []}],\r\n                                        [{'align': []}],\r\n\r\n                                        ['clean']                                         // remove formatting button\r\n                                    ]}\r\n                                />\r\n                                <RichTextInput\r\n                                    fullWidth\r\n                                    multiline\r\n                                    validate={[maxLength(500), required()]}\r\n                                    source=\"contact_title\"\r\n                                    toolbar={[\r\n                                        ['bold', 'italic', 'underline', 'strike'],        // toggled buttons\r\n                                        ['blockquote', 'code-block'],\r\n\r\n                                        [{'header': 1}, {'header': 2}],               // custom button values\r\n                                        [{'list': 'ordered'}, {'list': 'bullet'}],\r\n                                        [{'script': 'sub'}, {'script': 'super'}],      // superscript/subscript\r\n                                        [{'indent': '-1'}, {'indent': '+1'}],          // outdent/indent\r\n                                        [{'direction': 'rtl'}],                         // text direction\r\n\r\n                                        [{'size': ['small', false, 'large', 'huge']}],  // custom dropdown\r\n                                        [{'header': [1, 2, 3, 4, 5, 6, false]}],\r\n\r\n                                        [{'color': []}, {'background': []}],          // dropdown with defaults from theme\r\n                                        [{'font': []}],\r\n                                        [{'align': []}],\r\n\r\n                                        ['clean']                                         // remove formatting button\r\n                                    ]}\r\n                                />\r\n                                <RichTextInput\r\n                                    fullWidth\r\n                                    multiline\r\n                                    validate={[maxLength(500), required()]}\r\n                                    source=\"contact_message\"\r\n                                    toolbar={[\r\n                                        ['bold', 'italic', 'underline', 'strike'],        // toggled buttons\r\n                                        ['blockquote', 'code-block'],\r\n\r\n                                        [{'header': 1}, {'header': 2}],               // custom button values\r\n                                        [{'list': 'ordered'}, {'list': 'bullet'}],\r\n                                        [{'script': 'sub'}, {'script': 'super'}],      // superscript/subscript\r\n                                        [{'indent': '-1'}, {'indent': '+1'}],          // outdent/indent\r\n                                        [{'direction': 'rtl'}],                         // text direction\r\n\r\n                                        [{'size': ['small', false, 'large', 'huge']}],  // custom dropdown\r\n                                        [{'header': [1, 2, 3, 4, 5, 6, false]}],\r\n\r\n                                        [{'color': []}, {'background': []}],          // dropdown with defaults from theme\r\n                                        [{'font': []}],\r\n                                        [{'align': []}],\r\n\r\n                                        ['clean']                                         // remove formatting button\r\n                                    ]}\r\n                                />\r\n                            </Box>\r\n                        </FormTab>\r\n                    </TabbedForm>\r\n                </Edit>\r\n            )\r\n        }\r\n    }\r\n;\r\n\r\n\r\nexport default ProfileEdit;","import {Datagrid, EditButton, List, TextField} from \"react-admin\";\r\nimport * as React from \"react\";\r\n\r\nconst SkillList = (props) => (\r\n    <List {...props}>\r\n        <Datagrid>\r\n            <TextField source=\"title\"/>\r\n            <EditButton basePath=\"/skill\"/>\r\n        </Datagrid>\r\n    </List>\r\n);\r\nexport default SkillList;","import {Edit, maxLength, maxValue, minValue, NumberInput, required, SimpleForm, TextInput} from \"react-admin\";\r\nimport * as React from \"react\";\r\n\r\n\r\nconst SkillTitle = ({record}) => {\r\n    return <span>Skill {record ? `\"${record.title}\"` : ''}</span>;\r\n};\r\n\r\nconst SkillEdit = (props) => {\r\n        return (\r\n            <Edit title={<SkillTitle/>} {...props}>\r\n                <SimpleForm>\r\n                    <TextInput validate={[maxLength(500), required()]} source=\"title\"/>\r\n                    <NumberInput validate={[maxValue(5), minValue(1), required()]} source=\"level\"/>\r\n                </SimpleForm>\r\n            </Edit>\r\n        )\r\n    }\r\n;\r\n\r\n\r\nexport default SkillEdit;","import {Create, maxLength, maxValue, minValue, NumberInput, required, SimpleForm, TextInput} from \"react-admin\";\r\nimport * as React from \"react\";\r\n\r\nconst SkillCreate = (props) => (\r\n    <Create title=\"Create a Skill\" {...props}>\r\n        <SimpleForm>\r\n            <TextInput validate={[maxLength(500), required()]} source=\"title\"/>\r\n            <NumberInput validate={[maxValue(5),minValue(1), required()]} source=\"level\"/>\r\n        </SimpleForm>\r\n    </Create>\r\n);\r\n\r\nexport default SkillCreate;","import {Create, maxLength, required, SelectInput, SimpleForm, TextInput} from \"react-admin\";\r\nimport RichTextInput from \"ra-input-rich-text\";\r\nimport * as React from \"react\";\r\n\r\nconst ExperienceCreate = (props) => (\r\n    <Create title=\"Create a Experience\" {...props}>\r\n        <SimpleForm>\r\n            <TextInput validate={[maxLength(50), required()]} source=\"title\"/>\r\n            <SelectInput validate={[maxLength(50), required()]} source=\"type\" choices={[\r\n                {id: 'experience', name: 'Experience'},\r\n                {id: 'education', name: 'Education'},\r\n            ]}/>\r\n            <TextInput validate={[maxLength(50), required()]} source=\"duration\"/>\r\n            <TextInput validate={[maxLength(50), required()]} source=\"place_name\"/>\r\n            <RichTextInput\r\n                source=\"description\"\r\n                validate={[maxLength(400), required()]}\r\n                toolbar={[\r\n                    ['bold', 'italic', 'underline', 'strike'],        // toggled buttons\r\n                    ['blockquote', 'code-block'],\r\n\r\n                    [{'header': 1}, {'header': 2}],               // custom button values\r\n                    [{'list': 'ordered'}, {'list': 'bullet'}],\r\n                    [{'script': 'sub'}, {'script': 'super'}],      // superscript/subscript\r\n                    [{'indent': '-1'}, {'indent': '+1'}],          // outdent/indent\r\n                    [{'direction': 'rtl'}],                         // text direction\r\n\r\n                    [{'size': ['small', false, 'large', 'huge']}],  // custom dropdown\r\n                    [{'header': [1, 2, 3, 4, 5, 6, false]}],\r\n\r\n                    [{'color': []}, {'background': []}],          // dropdown with defaults from theme\r\n                    [{'font': []}],\r\n                    [{'align': []}],\r\n\r\n                    ['clean']                                         // remove formatting button\r\n                ]}\r\n            />\r\n        </SimpleForm>\r\n    </Create>\r\n);\r\n\r\nexport default ExperienceCreate;","import {Edit, maxLength, required, SelectInput, SimpleForm, TextInput} from \"react-admin\";\r\nimport RichTextInput from \"ra-input-rich-text\";\r\nimport * as React from \"react\";\r\n\r\n\r\nconst ExperienceTitle = ({record}) => {\r\n    return <span>Experience {record ? `\"${record.title}\"` : ''}</span>;\r\n};\r\n\r\nconst ExperienceEdit = (props) => {\r\n        return (\r\n            <Edit title={<ExperienceTitle/>} {...props}>\r\n                <SimpleForm>\r\n                    <TextInput validate={[maxLength(50), required()]} source=\"title\"/>\r\n                    <SelectInput validate={[maxLength(50), required()]} source=\"type\" choices={[\r\n                        {id: 'experience', name: 'Experience'},\r\n                        {id: 'education', name: 'Education'},\r\n                    ]}/>\r\n                    <TextInput validate={[maxLength(50), required()]} source=\"duration\"/>\r\n                    <TextInput validate={[maxLength(50), required()]} source=\"place_name\"/>\r\n                    <RichTextInput\r\n                        source=\"description\"\r\n                        validate={[maxLength(400), required()]}\r\n                        toolbar={[\r\n                            ['bold', 'italic', 'underline', 'strike'],        // toggled buttons\r\n                            ['blockquote', 'code-block'],\r\n\r\n                            [{'header': 1}, {'header': 2}],               // custom button values\r\n                            [{'list': 'ordered'}, {'list': 'bullet'}],\r\n                            [{'script': 'sub'}, {'script': 'super'}],      // superscript/subscript\r\n                            [{'indent': '-1'}, {'indent': '+1'}],          // outdent/indent\r\n                            [{'direction': 'rtl'}],                         // text direction\r\n\r\n                            [{'size': ['small', false, 'large', 'huge']}],  // custom dropdown\r\n                            [{'header': [1, 2, 3, 4, 5, 6, false]}],\r\n\r\n                            [{'color': []}, {'background': []}],          // dropdown with defaults from theme\r\n                            [{'font': []}],\r\n                            [{'align': []}],\r\n\r\n                            ['clean']                                         // remove formatting button\r\n                        ]}\r\n                    />\r\n                </SimpleForm>\r\n            </Edit>\r\n        )\r\n    }\r\n;\r\n\r\n\r\nexport default ExperienceEdit;","import {Datagrid, EditButton, List, TextField} from \"react-admin\";\r\nimport * as React from \"react\";\r\n\r\nconst ExperienceList = (props) => (\r\n    <List {...props}>\r\n        <Datagrid>\r\n            <TextField source=\"title\"/>\r\n            <EditButton basePath=\"/experience\"/>\r\n        </Datagrid>\r\n    </List>\r\n);\r\nexport default ExperienceList;","import {Datagrid, EditButton, List, TextField} from \"react-admin\";\r\nimport * as React from \"react\";\r\n\r\nconst PortfolioList = (props) => (\r\n    <List {...props}>\r\n        <Datagrid>\r\n            <TextField source=\"title\"/>\r\n            <EditButton basePath=\"/portfolio\"/>\r\n        </Datagrid>\r\n    </List>\r\n);\r\nexport default PortfolioList;","import {Box, Card, CardActionArea, CardMedia, Grid, Typography} from \"@material-ui/core\";\r\nimport {\r\n    Edit,\r\n    ImageField,\r\n    ImageInput, maxLength, required,\r\n    SimpleForm,\r\n    TextInput,\r\n    useEditController\r\n} from \"react-admin\";\r\nimport RichTextInput from \"ra-input-rich-text\";\r\nimport * as React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        maxWidth: 345,\r\n    },\r\n    media: {\r\n        height: 140,\r\n    },\r\n});\r\nconst PortfolioTitle = ({record}) => {\r\n    return <span>Portfolio {record ? `\"${record.title}\"` : ''}</span>;\r\n};\r\nconst ShowPicture = ({picture}) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Box>\r\n            <Typography style={{fontSize: \"0.8rem\", marginBottom: \"10px\"}}\r\n                        className=\"MuiFormLabel-root RaFileInput-root-78\">\r\n                Last Picture\r\n            </Typography>\r\n            <Card className={classes.root}>\r\n                <CardActionArea>\r\n                    <CardMedia\r\n                        className={classes.media}\r\n                        image={picture}\r\n                        title=\"Contemplative Reptile\"\r\n                    />\r\n                </CardActionArea>\r\n            </Card>\r\n        </Box>\r\n    );\r\n}\r\nconst PortfolioEdit = (props) => {\r\n        const controllerProps = useEditController(props);\r\n        let {\r\n            record, // record fetched via dataProvider.getOne() based on the id from the location\r\n        } = controllerProps;\r\n        if (typeof record == \"undefined\") {\r\n            return (\r\n                <React.Fragment/>\r\n            )\r\n        } else return (\r\n            <Edit title={<PortfolioTitle/>} {...props}>\r\n                <SimpleForm>\r\n                    <TextInput validate={[maxLength(50), required()]} source=\"title\"/>\r\n                    <TextInput validate={[maxLength(100), required()]} source=\"link\"/>\r\n                    <RichTextInput\r\n                        source=\"description\"\r\n                        validate={[maxLength(400), required()]}\r\n                        toolbar={[\r\n                            ['bold', 'italic', 'underline', 'strike'],        // toggled buttons\r\n                            ['blockquote', 'code-block'],\r\n\r\n                            [{'header': 1}, {'header': 2}],               // custom button values\r\n                            [{'list': 'ordered'}, {'list': 'bullet'}],\r\n                            [{'script': 'sub'}, {'script': 'super'}],      // superscript/subscript\r\n                            [{'indent': '-1'}, {'indent': '+1'}],          // outdent/indent\r\n                            [{'direction': 'rtl'}],                         // text direction\r\n\r\n                            [{'size': ['small', false, 'large', 'huge']}],  // custom dropdown\r\n                            [{'header': [1, 2, 3, 4, 5, 6, false]}],\r\n\r\n                            [{'color': []}, {'background': []}],          // dropdown with defaults from theme\r\n                            [{'font': []}],\r\n                            [{'align': []}],\r\n\r\n                            ['clean']                                         // remove formatting button\r\n                        ]}\r\n                    />\r\n                    <Grid container spacing={3} style={{width: \"100%\"}}>\r\n                        <Grid item xs={6}>\r\n                            <ImageInput validate={[required()]} source=\"picture\" accept=\"image/*\">\r\n                                <ImageField source=\"src\" title=\"title\"/>\r\n                            </ImageInput>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <ShowPicture picture={ record.picture}/>\r\n                        </Grid>\r\n                    </Grid>\r\n                </SimpleForm>\r\n            </Edit>\r\n        )\r\n    }\r\n;\r\n\r\n\r\nexport default PortfolioEdit;","import {\r\n    Create,\r\n    ImageField,\r\n    ImageInput,\r\n    maxLength,\r\n    required,\r\n    SimpleForm,\r\n    TextInput,\r\n    useEditController\r\n} from \"react-admin\";\r\nimport RichTextInput from \"ra-input-rich-text\";\r\nimport * as React from \"react\";\r\nimport {Box, Card, CardActionArea, CardMedia, Grid, Typography} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        maxWidth: 345,\r\n    },\r\n    media: {\r\n        height: 140,\r\n    },\r\n});\r\nconst ShowPicture = ({picture}) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Box>\r\n            <Typography style={{fontSize: \"0.8rem\", marginBottom: \"10px\"}}\r\n                        className=\"MuiFormLabel-root RaFileInput-root-78\">\r\n                Last Picture\r\n            </Typography>\r\n            <Card className={classes.root}>\r\n                <CardActionArea>\r\n                    <CardMedia\r\n                        className={classes.media}\r\n                        image={picture}\r\n                        title=\"Contemplative Reptile\"\r\n                    />\r\n                </CardActionArea>\r\n            </Card>\r\n        </Box>\r\n    );\r\n}\r\nconst PortfolioCreate = (props) => {\r\n    const controllerProps = useEditController(props);\r\n    let {\r\n        record, // record fetched via dataProvider.getOne() based on the id from the location\r\n    } = controllerProps;\r\n    if (typeof record == \"undefined\") {\r\n        return (\r\n            <React.Fragment/>\r\n        )\r\n    } else return (\r\n        <Create title=\"Create a Portfolio\" {...props}>\r\n            <SimpleForm>\r\n                <TextInput validate={[maxLength(50), required()]} source=\"title\"/>\r\n                <TextInput validate={[maxLength(100), required()]} source=\"link\"/>\r\n                <RichTextInput\r\n                    source=\"description\"\r\n                    validate={[maxLength(400), required()]}\r\n                    toolbar={[\r\n                        ['bold', 'italic', 'underline', 'strike'],        // toggled buttons\r\n                        ['blockquote', 'code-block'],\r\n\r\n                        [{'header': 1}, {'header': 2}],               // custom button values\r\n                        [{'list': 'ordered'}, {'list': 'bullet'}],\r\n                        [{'script': 'sub'}, {'script': 'super'}],      // superscript/subscript\r\n                        [{'indent': '-1'}, {'indent': '+1'}],          // outdent/indent\r\n                        [{'direction': 'rtl'}],                         // text direction\r\n\r\n                        [{'size': ['small', false, 'large', 'huge']}],  // custom dropdown\r\n                        [{'header': [1, 2, 3, 4, 5, 6, false]}],\r\n\r\n                        [{'color': []}, {'background': []}],          // dropdown with defaults from theme\r\n                        [{'font': []}],\r\n                        [{'align': []}],\r\n\r\n                        ['clean']                                         // remove formatting button\r\n                    ]}\r\n                />\r\n                <Grid container spacing={3} style={{width: \"100%\"}}>\r\n                    <Grid item xs={12}>\r\n                        <ImageInput validate={[required()]} source=\"picture\" accept=\"image/*\">\r\n                            <ImageField source=\"src\" title=\"Picture\"/>\r\n                        </ImageInput>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n            </SimpleForm>\r\n        </Create>\r\n    )\r\n};\r\n\r\nexport default PortfolioCreate;","import {Datagrid, EditButton, List, TextField} from \"react-admin\";\r\nimport * as React from \"react\";\r\n\r\nconst SocialList = (props) => (\r\n    <List {...props}>\r\n        <Datagrid>\r\n\\            <TextField source=\"title\"/>\r\n            <EditButton basePath=\"/socialnetwork\"/>\r\n        </Datagrid>\r\n    </List>\r\n);\r\nexport default SocialList;","import {\r\n    Edit, maxLength, required,\r\n    SelectInput,\r\n    SimpleForm,\r\n    TextInput\r\n} from \"react-admin\";\r\nimport * as React from \"react\";\r\n\r\nconst SocialTitle = ({record}) => {\r\n    return <span>Social {record ? `\"${record.title}\"` : ''}</span>;\r\n};\r\n\r\nconst SocialEdit = (props) => {\r\n        return (\r\n            <Edit title={<SocialTitle/>} {...props}>\r\n                <SimpleForm>\r\n                    <TextInput validate={[maxLength(50), required()]} source=\"title\"/>\r\n                    <SelectInput validate={[maxLength(20), required()]} source=\"icon\" choices={[\r\n                        {id: 'fa fa-instagram', name: 'Instagram'},\r\n                        {id: 'fa fa-facebook', name: 'Facebook'},\r\n                        {id: 'fa fa-linkedin', name: 'LinkedIn'},\r\n                        {id: 'fa fa-twitter', name: 'Twitter'},\r\n                        {id: 'fa fa-pinterest', name: 'Pinterest'},\r\n                        {id: 'fa fa-tumblr', name: 'Tumblr'},\r\n                        {id: 'fa fa-flickr', name: 'Flickr'},\r\n                        {id: 'fa fa-reddit', name: 'Reddit'},\r\n                    ]}/>\r\n                    <TextInput validate={[maxLength(50), required()]} source=\"link\"/>\r\n                </SimpleForm>\r\n            </Edit>\r\n        )\r\n    }\r\n;\r\n\r\n\r\nexport default SocialEdit;","import {Create, maxLength, required, SelectInput, SimpleForm, TextInput} from \"react-admin\";\r\nimport * as React from \"react\";\r\n\r\nconst SocialCreate = (props) => (\r\n    <Create title=\"Create a Social\" {...props}>\r\n        <SimpleForm>\r\n            <TextInput validate={[maxLength(50), required()]} source=\"title\"/>\r\n            <SelectInput validate={[maxLength(20), required()]} source=\"icon\" choices={[\r\n                {id: 'fa fa-instagram', name: 'Instagram'},\r\n                {id: 'fa fa-facebook', name: 'Facebook'},\r\n                {id: 'fa fa-linkedin', name: 'LinkedIn'},\r\n                {id: 'fa fa-twitter', name: 'Twitter'},\r\n                {id: 'fa fa-pinterest', name: 'Pinterest'},\r\n                {id: 'fa fa-tumblr', name: 'Tumblr'},\r\n                {id: 'fa fa-flickr', name: 'Flickr'},\r\n                {id: 'fa fa-reddit', name: 'Reddit'},\r\n            ]}/>\r\n            <TextInput validate={[maxLength(50),required()]} source=\"link\"/>\r\n        </SimpleForm>\r\n    </Create>\r\n);\r\n\r\nexport default SocialCreate;","import {Datagrid, ShowButton, List, TextField} from \"react-admin\";\r\nimport * as React from \"react\";\r\n\r\nconst ContactList = (props) => (\r\n    <List {...props}>\r\n        <Datagrid>\r\n            <TextField source=\"name\"/>\r\n            <TextField source=\"email\"/>\r\n            <TextField source=\"subject\"/>\r\n            <ShowButton basePath=\"/contact\" label=\"Show message\" record={props.record}/>\r\n        </Datagrid>\r\n    </List>\r\n);\r\nexport default ContactList;","// in src/Foo.js\r\nimport * as React from \"react\";\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport {Title} from 'react-admin';\r\nimport {Box, Button, InputLabel, TextField, Typography} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {useRef, useState} from \"react\";\r\nimport zxcvbn from 'zxcvbn';\r\nimport axios from \"axios\";\r\nimport {useAuthenticated, useNotify} from 'react-admin';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n}));\r\nconst Foo = () => {\r\n        useAuthenticated();\r\n        const classes = useStyles();\r\n        const [repeatValid, seRepeatVail] = useState(false)\r\n        const [passValid, setPassVaild] = useState(false)\r\n        const [repeatValidText, seRepeatValidText] = useState(\"\")\r\n        const [passValidText, sePassValidText] = useState(\"\")\r\n        const [password, setPassword] = useState(\"\")\r\n        const [passwordRepeat, setPasswordRepeat] = useState(\"\")\r\n        const notify = useNotify();\r\n\r\n        function onPasswordChange(e) {\r\n            setPassword(e.target.value)\r\n            if (e.target.value === \"\") {\r\n                setPassVaild(false)\r\n                sePassValidText(\"\")\r\n            }\r\n            if (e.target.value !== passwordRepeat) {\r\n                seRepeatVail(true)\r\n                seRepeatValidText(\"Not Equal\")\r\n            } else {\r\n                seRepeatVail(false)\r\n                seRepeatValidText(\"\")\r\n            }\r\n        }\r\n\r\n        function onRepeatChange(e) {\r\n            setPasswordRepeat(e.target.value)\r\n            if (e.target.value === \"\") {\r\n                seRepeatVail(false)\r\n                seRepeatValidText(\"\")\r\n            }\r\n            if (password !== e.target.value) {\r\n                seRepeatVail(true)\r\n                seRepeatValidText(\"Not Equal\")\r\n            } else {\r\n                seRepeatVail(false)\r\n                seRepeatValidText(\"\")\r\n            }\r\n        }\r\n\r\n        async function sendPassword() {\r\n            const formData = new FormData();\r\n            formData.append(\"password\", password)\r\n            const token = localStorage.getItem('token');\r\n\r\n            const result = await axios.put(\r\n                'https://mrsaberi.herokuapp.com/admin/apiv1/password/1/',\r\n                formData,\r\n                {\r\n                    headers: {\"Authorization\": `Token ${token}`}\r\n                }\r\n            )\r\n            if (result.status === 200) {\r\n                notify(\"password Changed\", {type: 'success'});\r\n            } else {\r\n                notify(\"password did not Chang\", {type: 'warning'});\r\n            }\r\n        }\r\n\r\n        function OnFormSubmit() {\r\n            if (password !== passwordRepeat) return;\r\n            const strength = zxcvbn(password).score;\r\n\r\n            if (strength <= 3) {\r\n                alert(\"Please choose a stronger password\");\r\n            } else {\r\n                sendPassword()\r\n            }\r\n        }\r\n\r\n        return <Card>\r\n            <Title title=\"My Page\"/>\r\n            <CardContent>\r\n                <form\r\n                    className={classes.root}\r\n                    autoComplete=\"off\"\r\n                >\r\n                    <Box style={{minHeight: \"100px\"}}>\r\n                        <TextField\r\n                            onChange={onPasswordChange}\r\n                            required\r\n                            type=\"password\"\r\n                            id=\"standard-required\"\r\n                            label=\"Password\"\r\n                            value={password}\r\n                            helperText={passValidText}\r\n                            error={passValid}\r\n                        />\r\n                        <TextField\r\n                            onChange={onRepeatChange}\r\n                            required\r\n                            type=\"password\"\r\n                            value={passwordRepeat}\r\n                            id=\"standard-required\"\r\n                            label=\"Repeat Password\"\r\n                            error={repeatValid}\r\n                            helperText={repeatValidText}\r\n                        />\r\n                    </Box>\r\n                    <Button onClick={OnFormSubmit} variant=\"contained\" color=\"primary\">\r\n                        Save\r\n                    </Button>\r\n\r\n                </form>\r\n            </CardContent>\r\n        </Card>\r\n\r\n    }\r\n;\r\n\r\nexport default Foo;","import React from \"react\";\r\nimport { UserMenu, MenuItemLink } from \"react-admin\";\r\nimport SettingsIcon from \"@material-ui/icons/Settings\";\r\n\r\nconst MyUserMenu = (props) => {\r\n  return (\r\n    <UserMenu {...props}>\r\n      <MenuItemLink\r\n        to=\"/password\"\r\n        primaryText=\"Password Change\"\r\n        leftIcon={<SettingsIcon />}\r\n      />\r\n    </UserMenu>\r\n  );\r\n};\r\n\r\nexport default MyUserMenu;","import React from 'react';\r\nimport { AppBar } from 'react-admin';\r\nimport MyUserMenu from './MyUserMenu';\r\n\r\nconst MyAppBar = props => <AppBar {...props} userMenu={<MyUserMenu />} />;\r\nexport default MyAppBar;","import React from 'react';\r\nimport { Layout } from 'react-admin';\r\nimport MyAppBar from './MyAppBar';\r\n\r\nconst MyLayout = props => <Layout {...props} appBar={MyAppBar} />;\r\n\r\nexport default MyLayout;","import * as React from \"react\";\r\nimport {render} from 'react-dom';\r\nimport {Admin, Resource} from 'react-admin';\r\nimport {\r\n    ShowGuesser,\r\n} from 'react-admin';\r\nimport drfProvider from './ra-django/DataProvider'\r\nimport {tokenAuthProvider, fetchJsonWithAuthToken} from \"./ra-django/tokenAuthProvider\";\r\nimport BuildIcon from '@material-ui/icons/Build';\r\nimport {mainUrl} from \"./ra-django/UrlSetting\";\r\nimport PostList from \"./post/PostList\";\r\nimport PostEdit from \"./post/PostEdit\";\r\nimport PostCreate from \"./post/PostCreate\";\r\nimport AccountBoxIcon from '@material-ui/icons/AccountBox';\r\nimport ProfileList from \"./Profile/ProfileList\";\r\nimport ProfileEdit from \"./Profile/ProfileEdit\";\r\nimport SkillList from \"./skill/SkillList\";\r\nimport SkillEdit from \"./skill/SkillEdit\";\r\nimport SkillCreate from \"./skill/SkillCreate\";\r\nimport ExperienceCreate from \"./experience/experienceCreate\";\r\nimport ExperienceEdit from \"./experience/experienceEdit\";\r\nimport ExperienceList from \"./experience/experienceList\";\r\nimport TransferWithinAStationIcon from '@material-ui/icons/TransferWithinAStation';\r\nimport PortfolioList from \"./portfolio/portfolioList\";\r\nimport PortfolioEdit from \"./portfolio/portfolioEdit\";\r\nimport PortfolioCreate from \"./portfolio/portfolioCreate\";\r\nimport WorkIcon from '@material-ui/icons/Work';\r\nimport MessageIcon from '@material-ui/icons/Message';\r\nimport WebIcon from '@material-ui/icons/Web';\r\nimport SocialList from \"./socialnetwork/SocialList\";\r\nimport SocialEdit from \"./socialnetwork/SocialEdit\";\r\nimport SocialCreate from \"./socialnetwork/SocialCreate\";\r\nimport ContactList from \"./contact/ContactList\";\r\nimport SubjectIcon from '@material-ui/icons/Subject';\r\nimport {Route} from 'react-router-dom';\r\nimport Foo from \"./password\";\r\nimport MyLayout from \"./MyLayout\";\r\n\r\nconst authProvider = tokenAuthProvider();\r\nconst dataProvider = drfProvider(mainUrl, fetchJsonWithAuthToken);\r\n\r\n\r\nrender(\r\n    <Admin\r\n        authProvider={authProvider}\r\n        dataProvider={dataProvider}\r\n        customRoutes={[\r\n            <Route\r\n                key=\"password\"\r\n                exact\r\n                path=\"/password\"\r\n                component={Foo}\r\n            />]}\r\n        appLayout={MyLayout}\r\n    >\r\n        {\r\n            permissions => [\r\n                <Resource name=\"post\" list={PostList} edit={PostEdit} create={PostCreate} icon={SubjectIcon}/>,\r\n                <Resource name=\"skill\" list={SkillList} edit={SkillEdit} create={SkillCreate} icon={BuildIcon}/>,\r\n                <Resource name=\"experience\" list={ExperienceList} edit={ExperienceEdit} create={ExperienceCreate}\r\n                          icon={TransferWithinAStationIcon}/>,\r\n                <Resource name=\"portfolio\" list={PortfolioList} edit={PortfolioEdit} create={PortfolioCreate}\r\n                          icon={WorkIcon}/>,\r\n                <Resource name=\"socialnetwork\" list={SocialList} edit={SocialEdit} create={SocialCreate}\r\n                          icon={WebIcon} options={{label: 'Social Networks'}}/>,\r\n                <Resource name=\"contact\" list={ContactList} show={ShowGuesser} icon={MessageIcon}/>,\r\n                <Resource name=\"profile\" list={ProfileList} edit={ProfileEdit} icon={AccountBoxIcon}\r\n                          options={{label: 'My Profile'}}/>\r\n            ]\r\n        }\r\n    </Admin>,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n","import {fetchUtils} from 'ra-core';\r\nimport {tokenUrl} from './UrlSetting'\r\n\r\nexport function tokenAuthProvider(options = {}) {\r\n    const opts = {\r\n        obtainAuthTokenUrl: tokenUrl,\r\n        ...options,\r\n    };\r\n    return {\r\n        login: async ({username, password}) => {\r\n            const request = new Request(opts.obtainAuthTokenUrl, {\r\n                method: 'POST',\r\n                body: JSON.stringify({username, password}),\r\n                headers: new Headers({'Content-Type': 'application/json'}),\r\n            });\r\n            const response = await fetch(request);\r\n            if (response.ok) {\r\n                localStorage.setItem('token', (await response.json()).token);\r\n                return;\r\n            }\r\n            if (response.headers.get('content-type') !== 'application/json') {\r\n                throw new Error(response.statusText);\r\n            }\r\n            const json = await response.json();\r\n            const error = json.non_field_errors;\r\n            throw new Error(error || response.statusText);\r\n        },\r\n        logout: () => {\r\n            localStorage.removeItem('token');\r\n            return Promise.resolve();\r\n        },\r\n        checkAuth: () => localStorage.getItem('token') ? Promise.resolve() : Promise.reject(),\r\n        checkError: error => {\r\n            const status = error.status;\r\n            if (status === 401 || status === 403) {\r\n                localStorage.removeItem('token');\r\n                return Promise.reject();\r\n            }\r\n            return Promise.resolve();\r\n        },\r\n        getPermissions: () => {\r\n            return Promise.resolve();\r\n        },\r\n    };\r\n}\r\n\r\nexport function createOptionsFromToken() {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n        return {};\r\n    }\r\n    return {\r\n        user: {\r\n            authenticated: true,\r\n            token: 'Token ' + token,\r\n        },\r\n    };\r\n}\r\n\r\nexport function fetchJsonWithAuthToken(url, options) {\r\n    return fetchUtils.fetchJson(url, Object.assign(createOptionsFromToken(), options));\r\n}\r\n\r\n// export default tokenAuthProvider;"],"sourceRoot":""}