{"version":3,"sources":["ra-django/DataProvider.js","ra-django/UrlSetting.js","index.js","ra-django/tokenAuthProvider.js"],"names":["getPaginationQuery","pagination","page","page_size","perPage","getFilterQuery","filter","search","q","otherSearchParams","getOrderingQuery","sort","field","order","ordering","drfProvider","apiUrl","httpClient","fetchUtils","fetchJson","getOneJson","resource","id","then","response","json","getList","params","a","query","url","stringify","data","results","total","count","getOne","getMany","Promise","all","ids","map","getManyReference","target","update","console","log","formData","FormData","Object","keys","forEach","key","includes","append","rawFile","myHeaders","Headers","method","headers","body","updateMany","JSON","responses","create","delete","previousData","deleteMany","tokenUrl","mainUrl","TestIcon","BookIcon","authProvider","options","opts","obtainAuthTokenUrl","login","username","password","request","Request","fetch","ok","localStorage","token","setItem","get","Error","statusText","error","non_field_errors","logout","removeItem","resolve","checkAuth","getItem","reject","checkError","status","getPermissions","tokenAuthProvider","dataProvider","assign","user","authenticated","createOptionsFromToken","useStyles","makeStyles","root","maxWidth","media","height","render","Admin","permissions","Resource","name","list","PostList","edit","PostEdit","PostCreate","icon","document","getElementById","props","List","Datagrid","TextField","source","EditButton","basePath","PostTitle","record","title","Lastpicture","form","useFormState","classes","Box","Typography","style","fontSize","marginBottom","className","Card","CardActionArea","CardMedia","image","values","picture","Edit","SimpleForm","TextInput","disabled","toolbar","AutocompleteInput","choices","label","ImageInput","accept","ImageField","Create"],"mappings":"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","file":"static/js/main.18fa76a2.chunk.js","sourcesContent":["import {stringify} from 'query-string';\r\nimport {fetchUtils,} from 'ra-core';\r\n\r\nconst getPaginationQuery = (pagination) => {\r\n    return {\r\n        page: pagination.page,\r\n        page_size: pagination.perPage,\r\n    };\r\n};\r\nconst getFilterQuery = (filter) => {\r\n    const {q: search, ...otherSearchParams} = filter;\r\n    return {\r\n        ...otherSearchParams,\r\n        search,\r\n    };\r\n};\r\nexport const getOrderingQuery = (sort) => {\r\n    const {field, order} = sort;\r\n    return {\r\n        ordering: `${order === 'ASC' ? '' : '-'}${field}`,\r\n    };\r\n};\r\nexport const drfProvider = (apiUrl, httpClient = fetchUtils.fetchJson) => {\r\n    const getOneJson = (resource, id) => httpClient(`${apiUrl}/${resource}/${id}/`).then((response) => response.json);\r\n    return {\r\n        getList: async (resource, params) => {\r\n            const query = {\r\n                ...getFilterQuery(params.filter),\r\n                ...getPaginationQuery(params.pagination),\r\n                ...getOrderingQuery(params.sort),\r\n            };\r\n            const url = `${apiUrl}/${resource}/?${stringify(query)}`;\r\n            const {json} = await httpClient(url);\r\n            return {\r\n                data: json.results,\r\n                total: json.count,\r\n            };\r\n        },\r\n        getOne: async (resource, params) => {\r\n            const data = await getOneJson(resource, params.id);\r\n            return {\r\n                data,\r\n            };\r\n        },\r\n        getMany: (resource, params) => {\r\n            return Promise.all(params.ids.map(id => getOneJson(resource, id))).then(data => ({data}));\r\n        },\r\n        getManyReference: async (resource, params) => {\r\n            const query = {\r\n                ...getFilterQuery(params.filter),\r\n                ...getPaginationQuery(params.pagination),\r\n                ...getOrderingQuery(params.sort),\r\n                [params.target]: params.id,\r\n            };\r\n            const url = `${apiUrl}/${resource}/?${stringify(query)}`;\r\n            const {json} = await httpClient(url);\r\n            return {\r\n                data: json.results,\r\n                total: json.count,\r\n            };\r\n        },\r\n        update: async (resource, params) => {\r\n            console.log(params)\r\n            const formData = new FormData();\r\n            Object.keys(params.data).forEach(\r\n                (key) => {\r\n                    if (key === \"picture\") {\r\n                        if (Object.keys(params.data[\"picture\"]).includes(\"rawFile\")) {\r\n                            formData.append(key, params.data[key].rawFile)\r\n                            console.log(\"hear\")\r\n                        }\r\n                    } else {\r\n                        formData.append(key, params.data[key])\r\n                    }\r\n\r\n                }\r\n            )\r\n            const myHeaders = new Headers();\r\n            myHeaders.append('enctype', 'multipart/form-data');\r\n            const {json} = await httpClient(`${apiUrl}/${resource}/${params.id}/`, {\r\n                method: 'PUT',\r\n                headers: myHeaders,\r\n                body: formData,\r\n            });\r\n            return {data: json};\r\n        },\r\n        updateMany: (resource, params) => Promise.all(params.ids.map(id => httpClient(`${apiUrl}/${resource}/${id}/`, {\r\n            method: 'PATCH',\r\n            body: JSON.stringify(params.data),\r\n        }))).then(responses => ({data: responses.map(({json}) => json.id)})),\r\n        create: async (resource, params) => {\r\n            const formData = new FormData()\r\n            const myHeaders = new Headers();\r\n            Object.keys(params.data).forEach(\r\n                (key) => {\r\n                    if (Object.keys(params.data[key]).includes(\"rawFile\")) {\r\n                        formData.append(key, params.data[key].rawFile)\r\n                    } else {\r\n                        formData.append(key, params.data[key])\r\n                    }\r\n\r\n                }\r\n            )\r\n            myHeaders.append('enctype', 'multipart/form-data');\r\n            const {json} = await httpClient(`${apiUrl}/${resource}/`, {\r\n                method: 'POST',\r\n                headers: myHeaders,\r\n                body: formData,\r\n            });\r\n            return {\r\n                data: {...json},\r\n            };\r\n        },\r\n        delete: (resource, params) => httpClient(`${apiUrl}/${resource}/${params.id}/`, {\r\n            method: 'DELETE',\r\n        }).then(() => ({data: params.previousData})),\r\n        deleteMany: (resource, params) => Promise.all(params.ids.map(id => httpClient(`${apiUrl}/${resource}/${id}/`, {\r\n            method: 'DELETE',\r\n        }))).then(responses => ({data: responses.map(({json}) => json.id)})),\r\n    };\r\n};\r\nexport default drfProvider;","export const tokenUrl = 'http://localhost:8000/api-token-auth/';\r\nexport const mainUrl = \"http://localhost:8000/admin/apiv1\";\r\nexport default mainUrl;","// in app.js\r\nimport * as React from \"react\";\r\nimport {render} from 'react-dom';\r\nimport {Admin, ImageField, ImageInput, Resource} from 'react-admin';\r\nimport {\r\n    List,\r\n    Datagrid,\r\n    Edit,\r\n    Create,\r\n    SimpleForm,\r\n    TextField,\r\n    EditButton,\r\n    TextInput,\r\n    AutocompleteInput,\r\n    ShowButton,\r\n} from 'react-admin';\r\nimport {Card, CardActionArea, Box, CardMedia, Typography} from '@material-ui/core';\r\nimport BookIcon from '@material-ui/icons/Book';\r\nimport drfProvider from './ra-django/DataProvider'\r\nimport {tokenAuthProvider, fetchJsonWithAuthToken} from \"./ra-django/tokenAuthProvider\";\r\nimport RichTextInput from 'ra-input-rich-text';\r\nimport {useFormState} from 'react-final-form';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {mainUrl} from \"./ra-django/UrlSetting\";\r\n\r\nconst TestIcon = BookIcon;\r\nconst authProvider = tokenAuthProvider();\r\nconst dataProvider = drfProvider(mainUrl, fetchJsonWithAuthToken);\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        maxWidth: 345,\r\n    },\r\n    media: {\r\n        height: 140,\r\n    },\r\n});\r\n\r\n\r\nrender(\r\n    <Admin\r\n        authProvider={authProvider}\r\n        dataProvider={dataProvider}\r\n    >\r\n        {\r\n            permissions => [\r\n                <Resource name=\"post\" list={PostList} edit={PostEdit} create={PostCreate} icon={TestIcon}/>\r\n            ]\r\n        }\r\n    </Admin>,\r\n    document.getElementById('root')\r\n);\r\n\r\nconst PostList = (props) => (\r\n    <List {...props}>\r\n        <Datagrid>\r\n            <TextField source=\"id\"/>\r\n            <TextField source=\"title\"/>\r\n            <EditButton basePath=\"/post\"/>\r\n        </Datagrid>\r\n    </List>\r\n);\r\n\r\nconst PostTitle = ({record}) => {\r\n    return <span>Post {record ? `\"${record.title}\"` : ''}</span>;\r\n};\r\nconst Lastpicture = () => {\r\n    const form = useFormState();\r\n    const classes = useStyles();\r\n    return (\r\n        <Box>\r\n            <Typography style={{fontSize:\"0.8rem\",marginBottom:\"10px\"}} className=\"MuiFormLabel-root RaFileInput-root-78\">\r\n                Last Picture\r\n            </Typography>\r\n            <Card className={classes.root}>\r\n                <CardActionArea>\r\n                    <CardMedia\r\n                        className={classes.media}\r\n                        image={form.values.picture}\r\n                        title=\"Contemplative Reptile\"\r\n                    />\r\n                </CardActionArea>\r\n            </Card>\r\n        </Box>\r\n    );\r\n}\r\nconst PostEdit = (props) => {\r\n        return (\r\n            <Edit title={<PostTitle/>} {...props}>\r\n                <SimpleForm>\r\n                    <TextInput disabled source=\"id\"/>\r\n                    <TextInput source=\"title\"/>\r\n                    <TextInput source=\"tag\"/>\r\n                    <RichTextInput\r\n                        source=\"content\"\r\n                        toolbar={[['bold', 'italic', 'underline', 'link']]}\r\n                    />\r\n                    <AutocompleteInput source=\"status\" choices={[\r\n                        {id: 'Published', name: 'Published'},\r\n                        {id: 'Draft', name: 'Draft'},\r\n                        {id: 'Trash', name: 'Trash'},\r\n                    ]}/>\r\n                    <TextInput disabled label=\"Nb views\" source=\"view\"/>\r\n                    <Lastpicture/>\r\n                    <ImageInput source=\"picture\" accept=\"image/*\">\r\n                        <ImageField source=\"src\" title=\"title\"/>\r\n                    </ImageInput>\r\n                </SimpleForm>\r\n            </Edit>\r\n        )\r\n    }\r\n;\r\n\r\nconst PostCreate = (props) => (\r\n    <Create title=\"Create a Post\" {...props}>\r\n        <SimpleForm>\r\n            <TextInput source=\"title\"/>\r\n            <TextInput source=\"tag\"/>\r\n            <RichTextInput\r\n                source=\"content\"\r\n                toolbar={[['bold', 'italic', 'underline', 'link']]}\r\n            />\r\n            <AutocompleteInput source=\"status\" choices={[\r\n                {id: 'Published', name: 'Published'},\r\n                {id: 'Draft', name: 'Draft'},\r\n                {id: 'Trash', name: 'Trash'},\r\n            ]}/>\r\n            <TextInput disabled label=\"Nb views\" source=\"view\"/>\r\n            <ImageInput source=\"picture\" accept=\"image/*\">\r\n                <ImageField source=\"src\" title=\"title\"/>\r\n            </ImageInput>\r\n        </SimpleForm>\r\n    </Create>\r\n);","import {fetchUtils} from 'ra-core';\r\nimport {tokenUrl} from './UrlSetting'\r\n\r\nexport function tokenAuthProvider(options = {}) {\r\n    const opts = {\r\n        obtainAuthTokenUrl: tokenUrl,\r\n        ...options,\r\n    };\r\n    return {\r\n        login: async ({username, password}) => {\r\n            const request = new Request(opts.obtainAuthTokenUrl, {\r\n                method: 'POST',\r\n                body: JSON.stringify({username, password}),\r\n                headers: new Headers({'Content-Type': 'application/json'}),\r\n            });\r\n            const response = await fetch(request);\r\n            if (response.ok) {\r\n                localStorage.setItem('token', (await response.json()).token);\r\n                return;\r\n            }\r\n            if (response.headers.get('content-type') !== 'application/json') {\r\n                throw new Error(response.statusText);\r\n            }\r\n            const json = await response.json();\r\n            const error = json.non_field_errors;\r\n            throw new Error(error || response.statusText);\r\n        },\r\n        logout: () => {\r\n            localStorage.removeItem('token');\r\n            return Promise.resolve();\r\n        },\r\n        checkAuth: () => localStorage.getItem('token') ? Promise.resolve() : Promise.reject(),\r\n        checkError: error => {\r\n            const status = error.status;\r\n            if (status === 401 || status === 403) {\r\n                localStorage.removeItem('token');\r\n                return Promise.reject();\r\n            }\r\n            return Promise.resolve();\r\n        },\r\n        getPermissions: () => {\r\n            return Promise.resolve();\r\n        },\r\n    };\r\n}\r\n\r\nexport function createOptionsFromToken() {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n        return {};\r\n    }\r\n    return {\r\n        user: {\r\n            authenticated: true,\r\n            token: 'Token ' + token,\r\n        },\r\n    };\r\n}\r\n\r\nexport function fetchJsonWithAuthToken(url, options) {\r\n    return fetchUtils.fetchJson(url, Object.assign(createOptionsFromToken(), options));\r\n}\r\n\r\n// export default tokenAuthProvider;"],"sourceRoot":""}